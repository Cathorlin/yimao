<%@ WebHandler Language="C#" Class="BarcodeGeneratorHandler" %>

using System;
using System.Web;

using System.Drawing;
using System.Drawing.Imaging;

public class BarcodeGeneratorHandler : IHttpHandler {
    
    public void ProcessRequest (HttpContext context) {
        //context.Response.ContentType = "text/plain";
        //context.Response.Write("Hello World");

        ////Logic to retrieve the image file
        //context.Response.ContentType = "image/jpeg";
        //context.Response.WriteFile("MyImgae01.jpg");

        //string Code = context.Request.QueryString["code"] = "BBAATTRR0123456789";

        // Get the Requested code to be created.
        string Code = context.Request["code"].ToString();

        // Multiply the lenght of the code by 40 (just to have enough width)
        int w = Code.Length * 40;

        // Create a bitmap object of the width that we calculated and height of 100
        Bitmap oBitmap = new Bitmap(w, 100);

        // then create a Graphic object for the bitmap we just created.
        Graphics oGraphics = Graphics.FromImage(oBitmap);

        // Now create a Font object for the Barcode Font
        // (in this case the IDAutomationHC39M) of 18 point size
        //Font oFont = new Font("IDAutomationHC39M", 18);
        Font oFont = new Font("Code39AzaleaWide2", 18);
        //other font: FRE3OF9X, Code39AzaleaWide2

        // Let's create the Point and Brushes for the barcode
        PointF oPoint = new PointF(2f, 2f);
        SolidBrush oBrushWrite = new SolidBrush(Color.Black);
        SolidBrush oBrush = new SolidBrush(Color.White);

        // Now lets create the actual barcode image
        // with a rectangle filled with white color
        oGraphics.FillRectangle(oBrush, 0, 0, w, 100);

        // We have to put prefix and sufix of an asterisk (*),
        // in order to be a valid barcode
        oGraphics.DrawString("*" + Code + "*", oFont, oBrushWrite, oPoint);

        // Then we send the Graphics with the actual barcode
        context.Response.ContentType = "image/jpeg";
        oBitmap.Save(context.Response.OutputStream, ImageFormat.Jpeg);
    }
 
    public bool IsReusable {
        get {
            return false;
        }
    }

}