CREATE OR REPLACE PACKAGE BL_INVENTORYPART_ACCEPT_API IS
  /*  新增初始化 New__
  Rowlist_ 初始化的参数 可以传入requseturl 当前请求的url地址
  User_Id_  当前用户
  A311_Key_ A314的主键 */
  PROCEDURE New__(Rowlist_ VARCHAR2, User_Id_ VARCHAR2, A311_Key_ VARCHAR2);

  /*  保存数据 Modify__
      Rowlist_  保存当前行的数据 
      User_Id_  当前用户
      A311_Key_ A314的主键     
  */
  PROCEDURE Modify__(Rowlist_  VARCHAR2,
                     User_Id_  VARCHAR2,
                     A311_Key_ VARCHAR2);
  /*  列发生变化的时候
      Column_Id_   当前修改的列
      Mainrowlist_ 主档的数据 明细有值，主档为空
      Rowlist_  保存当前行的数据 
      User_Id_  当前用户
      Outrowlist_  输出的数据   
  */
  PROCEDURE Itemchange__(Column_Id_   VARCHAR2,
                         Mainrowlist_ VARCHAR2,
                         Rowlist_     VARCHAR2,
                         User_Id_     VARCHAR2,
                         Outrowlist_  OUT VARCHAR2);
  /*  列发生变化的时候
      Dotype_   ADD_ROW  DEL_ROW 主要控制 明细的添加行 和 删除行 按钮 
      KEY_ 主档的主键值
      User_Id_  当前用户
  */
  FUNCTION Checkbutton__(Dotype_  IN VARCHAR2,
                         KEY_     IN VARCHAR2,
                         User_Id_ IN VARCHAR2) RETURN VARCHAR2;

  /*  实现业务逻辑控制列的 编辑性
      Doaction_   I M 明细肯定为 M   I 新增 M 修改 页面载入在 当前用有列的 可用性的以后 调用  
      Column_Id_  列
      Rowlist_  当前用户
  */
  FUNCTION Checkuseable(Doaction_  IN VARCHAR2,
                        Column_Id_ IN VARCHAR,
                        Rowlist_   IN VARCHAR2) RETURN VARCHAR2;

  procedure changeState__(Rowlist_ VARCHAR2,
                          --视图的objid
                          User_Id_ VARCHAR2,
                          --用户id
                          A311_Key_ VARCHAR2);

  procedure changeStateCancel__(Rowlist_ VARCHAR2,
                                --视图的objid
                                User_Id_ VARCHAR2,
                                --用户id
                                A311_Key_ VARCHAR2);

  procedure changeStateCompleted__(Rowlist_ VARCHAR2,
                                   --视图的objid
                                   User_Id_ VARCHAR2,
                                   --用户id
                                   A311_Key_ VARCHAR2);
END BL_INVENTORYPART_ACCEPT_API;
/
CREATE OR REPLACE PACKAGE BODY BL_INVENTORYPART_ACCEPT_API IS
  TYPE t_Cursor IS REF CURSOR;
  --【COLUMN】  列名称 按实际的逻辑 用实际的列名
  -- 【VALUE】  列的数据 按具体的实际逻辑 用对应的参数来替代
  /*
  报错
  Raise_Application_Error(pkg_a.raise_error,'出错了 ！！！！！');
  */

  /*  新增初始化 New__
  Rowlist_ 初始化的参数 可以传入requseturl 当前请求的url地址
  User_Id_  当前用户
  A311_Key_ A314的主键 */
  PROCEDURE New__(Rowlist_ VARCHAR2, User_Id_ VARCHAR2, A311_Key_ VARCHAR2) IS
    attr_out VARCHAR2(4000);
  BEGIN
    attr_out := '';
  
    -- pkg_a.Set_Item_Value('【COLUMN】', '【VALUE】', attr_out);
    pkg_a.Setresult(A311_Key_, attr_out);
  END;

  /*  保存数据 Modify__
      Rowlist_  保存当前行的数据 
      User_Id_  当前用户
      A311_Key_ A314的主键     
  */
  PROCEDURE Modify__(Rowlist_  VARCHAR2,
                     User_Id_  VARCHAR2,
                     A311_Key_ VARCHAR2) IS
    Objid_     VARCHAR2(50);
    Index_     VARCHAR2(1);
    Cur_       t_Cursor;
    pos_       number;
    pos1_      number;
    i          number;
    v_         varchar(1000);
    column_id_ varchar(1000);
    data_      varchar(4000);
    mysql_     varchar2(4000);
    ifmychange varchar2(1);
    row_       BL_V_INVENTORYPART_ACCEPT_DTL%ROWTYPE;
    Doaction_  VARCHAR2(10);
  BEGIN
  
    Index_    := f_Get_Data_Index();
    Objid_    := Pkg_a.Get_Item_Value('OBJID', Index_ || Rowlist_);
    Doaction_ := Pkg_a.Get_Item_Value('DOACTION', Rowlist_);
    --新增
    IF Doaction_ = 'I' THEN
      -- 【VALUE】= Pkg_a.Get_Item_Value('【COLUMN】', Rowlist_);
      --pkg_a.Setsuccess(A311_Key_, '[TABLE_ID]', Objid_);
      RETURN;
    END IF;
    --修改
    IF Doaction_ = 'M' THEN
      data_      := Rowlist_;
      pos_       := instr(data_, Index_);
      i          := i + 1;
      mysql_     := ' update BL_INVENTORYPART_MOVEREQ_DTL set ';
      ifmychange := '0';
      loop
        exit when nvl(pos_, 0) <= 0;
        exit when i > 300;
        v_         := substr(data_, 1, pos_ - 1);
        data_      := substr(data_, pos_ + 1);
        pos_       := instr(data_, index_);
        pos1_      := instr(v_, '|');
        column_id_ := substr(v_, 1, pos1_ - 1);
        if column_id_ <> 'OBJID' and column_id_ <> 'DOACTION' and
           length(nvl(column_id_, '')) > 0 then
          v_         := substr(v_, pos1_ + 1);
          i          := i + 1;
          ifmychange := '1';
          if column_id_ = 'EXPIRATION_DATE' then
            mysql_ := mysql_ || ' ' || column_id_ || '=to_date(''' || v_ ||
                      ''',''YYYY-MM-DD''),';
          else
            mysql_ := mysql_ || ' ' || column_id_ || '=''' || v_ || ''',';
          end if;
        end if;
      end loop;
      if ifmychange = '1' then
        -- 更新sql语句 
        mysql_ := substr(mysql_, 1, length(mysql_) - 1);
        mysql_ := mysql_ || ' where rowidtochar(rowid)=''' || objid_ || '''';
      
        execute immediate mysql_;
      end if;
      pkg_a.Setsuccess(A311_Key_, 'BL_V_INVENTORYPART_ACCEPT_DTL', Objid_);
      RETURN;
    END IF;
    --删除
    IF Doaction_ = 'D' THEN
      --pkg_a.Setsuccess(A311_Key_, '[TABLE_ID]', Objid_);
      RETURN;
    END IF;
  
  END;
  /*  列发生变化的时候
      Column_Id_   当前修改的列
      Mainrowlist_ 主档的数据 明细有值，主档为空
      Rowlist_  保存当前行的数据 
      User_Id_  当前用户
      Outrowlist_  输出的数据   
  */
  PROCEDURE Itemchange__(Column_Id_   VARCHAR2,
                         Mainrowlist_ VARCHAR2,
                         Rowlist_     VARCHAR2,
                         User_Id_     VARCHAR2,
                         Outrowlist_  OUT VARCHAR2) IS
    Attr_Out VARCHAR2(4000);
    row_     BL_V_CUSTLOCATION%rowtype;
    cur_     t_Cursor;
    ROW1_    BL_V_INVENTORYPART_ACCEPT_DTL%ROWTYPE;
  BEGIN
    ROW1_.objid := PKG_A.Get_Item_Value('OBJID', Rowlist_);
    OPEN CUR_ FOR
      SELECT T1.*
        FROM BL_V_INVENTORYPART_ACCEPT_DTL T1
       WHERE T1.objid = ROW1_.objid;
    fetch cur_
      into row1_;
    if cur_%notfound then
      close cur_;
      raise_application_error(-20101, '未找到数据');
      return;
    end if;
    close cur_;
  
    IF Column_Id_ = 'LOCATION_NO_DEST' THEN
      row_.LOCATION_NO_DEST := pkg_a.Get_Item_Value('LOCATION_NO_DEST',
                                                    Rowlist_);
      row_.CONTRACT_DEST    := pkg_a.Get_Item_Value('CONTRACT_DEST',
                                                    rowlist_);
    
      open cur_ for
        select t.*
          from BL_V_CUSTLOCATION t
         where t.contract_dest = row_.CONTRACT_DEST
           and t.location_no_dest = row_.LOCATION_NO_DEST
           and t.USER_CUST = Pkg_Attr.get_bl_userid(User_Id_);
      fetch cur_
        into row_;
      if cur_%notfound then
        close cur_;
        raise_application_error(-20101, '未找到数据');
        return;
      end if;
      close cur_;
      /*      --      Pkg_a.Set_Item_Value('CONTRACT_DEST', row1_.contract_dest, Attr_Out);
      --     Pkg_a.Set_Item_Value('LOCATION_NO_DEST',
       --                         row1_.location_no_dest,
       --                         Attr_Out);
           row1_.warehouse_dest := INVENTORY_LOCATION_API.Get_Warehouse(row1_.contract_dest,
                                                                        row1_.location_no_dest);
      row1_.warehouse_dest := pkg_a.Set_Item_Value('WAREHOUSE_DEST',
                                                   row_.WAREHOUSE_DEST,
                                                   attr_out);*/
      Pkg_a.Set_Item_Value('WAREHOUSE_DEST', row_.warehouse_dest, Attr_Out);
    
    END IF;
    Outrowlist_ := Attr_Out;
  END;
  /*  列发生变化的时候
      Dotype_   ADD_ROW  DEL_ROW 主要控制 明细的添加行 和 删除行 按钮 
      KEY_ 主档的主键值
      User_Id_  当前用户
  */
  FUNCTION Checkbutton__(Dotype_  IN VARCHAR2,
                         KEY_     IN VARCHAR2,
                         User_Id_ IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    IF Dotype_ = 'ADD_ROW' THEN
      RETURN '1';
    
    END IF;
    IF Dotype_ = 'DEL_ROW' THEN
      RETURN '1';
    
    END IF;
    RETURN '1';
  END;

  /*  实现业务逻辑控制列的 编辑性
      Doaction_   I M 明细肯定为 M   I 新增 M 修改 页面载入在 当前用有列的 可用性的以后 调用  
      Column_Id_  列
      Rowlist_  当前用户
      返回: 1 可用
      0 不可用
  */
  FUNCTION Checkuseable(Doaction_  IN VARCHAR2,
                        Column_Id_ IN VARCHAR,
                        Rowlist_   IN VARCHAR2) RETURN VARCHAR2 IS
    Row_ BL_V_INVENTORYPART_ACCEPT_DTL%rowtype;
  BEGIN
    Row_.state := pkg_a.Get_Item_Value('STATE', Rowlist_);
    IF Row_.STATE > 2 THEN
      RETURN '0';
    END IF;
    RETURN '1';
  END;

  procedure changeState__(Rowlist_ VARCHAR2,
                          --视图的objid
                          User_Id_ VARCHAR2,
                          --用户id
                          A311_Key_ VARCHAR2) IS
    cur_   t_Cursor;
    row_   BL_INVENTORYPART_MOVEREQ_DTL%ROWTYPE;
    Rowid_ VARCHAR2(2000);
  BEGIN
    Rowid_ := Rowlist_;
    open cur_ for
      select t.*
        from BL_INVENTORYPART_MOVEREQ_DTL t
       where t.rowid = Rowid_;
    fetch cur_
      into row_;
    if cur_%notfound then
      close cur_;
      raise_application_error(-20101, '错误的rowid');
    END IF;
    CLOSE cur_;
    --更新状态
    update BL_INVENTORYPART_MOVEREQ_DTL t
       set t.state = '2'
     where t.rowid = Rowid_;
    RETURN;
  END;

  procedure CHANGESTATECANCEL__(Rowlist_ VARCHAR2,
                                --视图的objid
                                User_Id_ VARCHAR2,
                                --用户id
                                A311_Key_ VARCHAR2) is
    CUR_   T_CURSOR;
    ROW_   BL_INVENTORYPART_MOVEREQ_DTL%ROWTYPE;
    Rowid_ VARCHAR2(1000);
  begin
    Rowid_ := Rowlist_;
    OPEN CUR_ FOR
      SELECT T.*
        FROM BL_INVENTORYPART_MOVEREQ_DTL T
       WHERE T.ROWID = Rowid_;
    FETCH CUR_
      INTO ROW_;
    IF CUR_%NOTFOUND THEN
      close cur_;
      raise_application_error(-20101, '错误的rowid');
    END IF;
    CLOSE CUR_;
  
    --更新主档
    UPDATE BL_INVENTORYPART_MOVEREQ_DTL T
       SET T.STATE = '1'
     WHERE T.ROWID = Rowid_;
  end;
  procedure changeStateCompleted__(Rowlist_ VARCHAR2,
                                   --视图的objid
                                   User_Id_ VARCHAR2,
                                   --用户id
                                   A311_Key_ VARCHAR2) is
    CUR_            T_CURSOR;
    ROWT_           BL_INVENTORYPART_MOVEREQ_DTL%ROWTYPE;
    Row_            BL_V_INVENTORYPART_ACCEPT_DTL%ROWTYPE;
    BL_MOVE         BL_INVENTORYPART_MOVEREQ_TRAN%ROWTYPE;
    Row1_           INVENTORY_LOCATION%ROWTYPE;
    Rowid_          VARCHAR2(1000);
    pallet_id_list_ VARCHAR2(4000);
  begin
    Rowid_          := Rowlist_;
    pallet_id_list_ := '';
    row_.objid      := pkg_a.Get_Item_Value('OBJID', Rowlist_);
    /*    --改状态
    OPEN CUR_ FOR
      SELECT T.*
        FROM BL_INVENTORYPART_MOVEREQ_DTL T
       WHERE T.ROWID = row_.objid;
    FETCH CUR_
      INTO ROWT_;
    IF CUR_%NOTFOUND THEN
      close cur_;
      raise_application_error(-20101, '错误的rowid');
    END IF;
    CLOSE CUR_;*/
  
    --移库下达
    OPEN CUR_ FOR
      SELECT T.*
        FROM BL_V_INVENTORYPART_ACCEPT_DTL T
       WHERE T.objid = row_.objid;
    FETCH CUR_
      INTO Row_;
    IF CUR_%NOTFOUND THEN
      close cur_;
      raise_application_error(-20101, '错误的rowid');
    END IF;
    CLOSE CUR_;
    row_.qty_comfirmed    := pkg_a.Get_Item_Value('QTY_COMFIRMED', Rowlist_);
    row_.location_no_dest := pkg_a.Get_Item_Value('LOCATION_NO_DEST',
                                                  Rowlist_);
    insert into a1
      (col, col01, id)
      select row_.qty_comfirmed, row_.qty_comfirm, s_a0.nextval from dual;
    commit;
    if row_.qty_comfirmed + row_.qty_comfirm > row_.qty_moved then
      raise_application_error(-20101,
                              '待移入数量加上已移入数量的和不能大于申请数量');
    end if;
    if row_.qty_comfirmed <= 0 then
      raise_application_error(-20101, '请输入正确的移入数量');
    end if;
    if NVL(row_.location_no_dest, 'NULL') = 'NULL' then
      raise_application_error(-20101, '请输入正确的目的库位号');
    end if;
  
    OPEN CUR_ FOR
      select *
        from INVENTORY_LOCATION I
       where I.contract = row_.contract_dest
         and I.location_no = row_.location_no_dest;
    FETCH CUR_
      INTO Row1_;
    IF CUR_%NOTFOUND THEN
      close cur_;
      raise_application_error(-20101, '目的库位号在目的域中不存在');
      return;
    END IF;
    CLOSE CUR_;
  
    Inventory_Part_In_Stock_API.Move_Part(pallet_id_list_,
                                          row_.contract,
                                          row_.PART_NO,
                                          row_.configuration_id,
                                          row_.location_no,
                                          row_.lot_batch_no,
                                          row_.serial_no,
                                          row_.eng_chg_level,
                                          row_.waiv_dev_rej_no,
                                          row_.expiration_date,
                                          row_.contract_dest,
                                          row_.LOCATION_NO_DEST,
                                          row_.destination,
                                          row_.QTY_COMFIRMED,
                                          row_.QTY_RESERVED,
                                          null);
  
    SELECT MAX(T.Transaction_Id)
      INTO ROW_.transaction_id
      FROM Inventory_Transaction_Hist2 T
     WHERE T.contract = ROW_.contract
       AND T.PART_NO = ROW_.PART_NO
       AND T.location_no = ROW_.location_no
       AND T.Lot_Batch_No = ROW_.Lot_Batch_No
       AND T.Serial_No = ROW_.Serial_No
       AND T.Waiv_Dev_Rej_No = ROW_.Waiv_Dev_Rej_No
       AND T.Eng_Chg_Level = ROW_.Eng_Chg_Level
       AND T.Configuration_Id = Row_.Configuration_Id
       AND T.transaction_code in ('INVM-ISS', 'INVM-OUT', 'COMPM-OUT');
  
    BL_MOVE.MOVED_NO       := ROW_.moved_no;
    BL_MOVE.MOVED_NO_LINE  := ROW_.moved_no_line;
    BL_MOVE.QTY_MOVED      := ROW_.qty_comfirm;
    BL_MOVE.TRANSACTION_ID := ROW_.transaction_id;
    BL_MOVE.ENTER_DATE     := SYSDATE;
    BL_MOVE.ENTER_USER     := USER_ID_;
    INSERT INTO BL_INVENTORYPART_MOVEREQ_TRAN
      (MOVED_NO,
       MOVED_NO_LINE,
       QTY_MOVED,
       TRANSACTION_ID,
       ENTER_DATE,
       ENTER_USER)
    VALUES
      (BL_MOVE.MOVED_NO,
       BL_MOVE.MOVED_NO_LINE,
       BL_MOVE.QTY_MOVED,
       BL_MOVE.TRANSACTION_ID,
       BL_MOVE.ENTER_DATE,
       BL_MOVE.ENTER_USER);
  
    --更新移库接收完成状态
    update BL_INVENTORYPART_MOVEREQ_DTL t1
       set t1.state       = '3',
           T1.Qty_Comfirm = NVL(T1.QTY_COMFIRM, 0) + ROW_.qty_comfirmed,
           t1.modi_date   = sysdate,
           t1.modi_user   = user_id_
     where t1.moved_no = ROW_.MOVED_NO;
  
    --更新移库申请状态
    UPDATE BL_INVENTORYPART_MOVEREQ T
       SET T.STATE = '3'
     WHERE T.Moved_No = row_.moved_no;
    --成功后报消息
    pkg_a.Setsuccess(A311_Key_,
                     'BL_INVENTORYPART_MOVEREQ_DTL',
                     pallet_id_list_);
  end;

END BL_INVENTORYPART_ACCEPT_API;
/
